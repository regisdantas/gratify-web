{"version":3,"file":"static/js/dashboard.530c05f7.chunk.js","mappings":"kLAMaA,EAAaC,EAAAA,GAAAA,KAAH,yFAInB,SAAAC,GAAK,MACU,UAAfA,EAAMC,OACNC,EAAAA,EAAAA,IADA,kDADK,I,SCQT,EAVuC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OACxC,OAAOA,GACL,SAACL,EAAD,CAAYG,KAAI,OAAEE,QAAF,IAAEA,OAAF,EAAEA,EAAQF,KAA1B,UACE,mCAASE,QAAT,IAASA,OAAT,EAASA,EAAQC,aAGnB,uBAEH,C,qECTYC,EAAY,SAACC,GACxB,OAAOC,EAAAA,SAA+BD,EACvC,C,gKCNYE,EAAgBT,EAAAA,GAAAA,IAAH,iLAWbU,EAAYV,EAAAA,GAAAA,IAAH,kE,UCZTW,EAAmBX,EAAAA,GAAAA,IAAH,mT,gFC0B7B,EAtB0B,WACxB,OAAuBY,EAAAA,EAAAA,KAAhBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAEPC,EAAY,yCAAG,4GAEXD,IAFW,sDAIjBE,QAAQC,IAAR,MAJiB,wDAAH,qDAQlB,OACE,UAACN,EAAD,YACE,gBAAKO,IAAKL,EAAKM,SAASN,EAAKM,SAASC,EAASC,QAAS,YAAwB,IAArBC,EAAoB,EAApBA,cACzDA,EAAcC,QAAU,KACxBD,EAAcJ,IAAIE,CACnB,EAAEI,IAAI,qBACP,SAAC,MAAD,CAAUC,KAAM,GAAIC,QAAS,kBAAMX,GAAN,MAGlC,ECnBYY,GALQ3B,EAAAA,GAAAA,GAAH,+DAKWA,EAAAA,GAAAA,IAAH,06CCiC1B,EA7BmC,SAAC,GAKjB,IAJjB4B,EAIgB,EAJhBA,GACAC,EAGgB,EAHhBA,QACAC,EAEgB,EAFhBA,aACAC,EACgB,EADhBA,gBAEMC,EAAUxB,EAAAA,OAA8B,MAC9C,OACE,SAACmB,EAAD,WACE,iBAAKM,UAAU,mBAAf,WACE,+BACE,qCAAaL,MACb,SAAC,MAAD,CAAUF,QAAS,SAAAQ,GAAC,OAAIJ,EAAaF,EAAjB,QAEtB,iBACEO,IAAKH,EACLI,KAAK,UACLC,iBAAe,EACf,mBAAiB,sCACjBC,OAAQ,SAAAJ,GAAC,OAAIH,EAAgBH,EAAIM,EAAEZ,cAAciB,UAAxC,EACTC,gCAAgC,EANlC,SAQGX,QAdaD,EAmBvB,E,iDC8FD,EAjH4B,WAC1B,IAAMa,GAAY,IAAIC,MAAOC,cAAcC,MAAM,KAAK,GACtD,EAAwCpC,EAAAA,SAAuBiC,GAA/D,eAAOI,EAAP,KAAqBC,EAArB,KACA,EAA8BtC,EAAAA,SAAyB,IAAvD,eAAOuC,EAAP,KAAgBC,EAAhB,KACA,GAAsC1C,EAAAA,EAAAA,GAAU,MAAhD,eAAO2C,EAAP,KACMC,GADN,KACgB1C,EAAAA,OAA+B,OACxCK,GAAQD,EAAAA,EAAAA,KAARC,KAEDsC,EAAmB,SAACC,GACxB,IAAMC,EAAO,IAAIX,KAAKG,GACtBQ,EAAKC,QAAQD,EAAKE,UAAYH,GAC9B,IAAMI,EAAUH,EAAKV,cAAcC,MAAM,KAAK,GAC9CE,EAAgBU,GACA,OAAZN,GAAwC,OAApBA,EAAQO,UAC9BP,EAAQO,QAAQC,MAAQF,EAE3B,EAhB+B,8CAsBhC,WAAiCG,GAAjC,qFACQC,EAAmB,CACvBC,IAAKhD,EAAKgD,IACVjC,GAAIkC,MACJjC,QAAS,GACTwB,KAAMR,GAEFkB,EAPR,kBAOyBhB,GAPzB,CAOkCa,IAChCZ,EAAWe,GARb,UASQC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAWC,EAAAA,GAAU,WAAYN,GAThD,4CAtBgC,oEAkChC,oGACE5C,QAAQC,IAAIJ,EAAKgD,KACXM,GAAYC,EAAAA,EAAAA,KAAMH,EAAAA,EAAAA,IAAWC,EAAAA,GAAU,YAAYG,EAAAA,EAAAA,IAAM,MAAO,KAAMxD,EAAKgD,MAFnF,UAG8BS,EAAAA,EAAAA,IAAQH,GAHtC,OAGQI,EAHR,OAIQxB,EAAoB,GAC1BwB,EAAcC,SAAQ,SAACC,GACrB1B,EAAQ2B,KAAKD,EAAIE,OAClB,IACD3B,EAAWD,GARb,2CAlCgC,wBA6ChCvC,EAAAA,WAAgB,YA7CgB,mCA8C9BoE,EACD,GAAE,IAEH,IAAMC,EAAiB,yCAAG,WAAOjD,GAAP,qFAClBmC,EAAahB,EAAQ+B,QAAO,SAAAC,GAAK,OAAIA,EAAMnD,KAAOA,CAAjB,IACvCoB,EAAWe,GACLI,GAAYC,EAAAA,EAAAA,KAAMH,EAAAA,EAAAA,IAAWC,EAAAA,GAAU,YAAYG,EAAAA,EAAAA,IAAM,KAAM,KAAMzC,IAHnD,UAII0C,EAAAA,EAAAA,IAAQH,GAJZ,cAKVK,SAAQ,SAACQ,IACrBC,EAAAA,EAAAA,KAAUR,EAAAA,EAAAA,IAAIP,EAAAA,GAAU,UAAWc,EAASpD,IAC7C,IAPuB,2CAAH,sDAUjBsD,EAAiB,yCAAG,WAAOtD,EAAYC,GAAnB,mFAClBkC,EAAahB,EAAQoC,KAAI,SAACJ,GAI9B,OAHIA,EAAMnD,KAAOA,IACfmD,EAAMlD,QAAUA,GAEXkD,CACR,IACD/B,EAAWe,KAELqB,EAAerC,EAAQsC,MAAK,SAAAN,GAAK,OAAIA,EAAMnD,KAAOA,CAAjB,KATf,wBAWtBwD,EAAavD,QAAUA,EACjBsC,GAAYC,EAAAA,EAAAA,KAAMH,EAAAA,EAAAA,IAAWC,EAAAA,GAAU,YAAYG,EAAAA,EAAAA,IAAM,KAAM,KAAMzC,IAZrD,UAaM0C,EAAAA,EAAAA,IAAQH,GAbd,cAcRK,SAAQ,SAACQ,IACrBM,EAAAA,EAAAA,KAAOb,EAAAA,EAAAA,IAAIP,EAAAA,GAAU,UAAWc,EAASpD,IAAKwD,EAC/C,IAhBqB,4CAAH,wDAoBvB,OACI,UAAC,KAAD,YACA,SAAC,EAAD,KACA,SAACG,EAAA,EAAD,CAAQnF,OAAQ6C,KAChB,UAACxC,EAAD,YACA,SAAC,MAAD,CAAagB,KAAM,GAAIC,QAAS,kBAAMyB,GAAkB,EAAxB,KAC9B,kBACEhB,IAAKe,EACLhD,KAAK,OACLsF,aAAc/C,EACdgD,SAvEkB,SAAC9B,GACzBb,EAAgBa,EAAM+B,OAAOhC,MAC9B,KAuEG,SAAC,MAAD,CAAcjC,KAAM,GAAIC,QAAS,kBAAMyB,EAAiB,EAAvB,QAEjC,SAACzC,EAAD,UACGqC,EAAQoC,KAAI,SAACJ,GACZ,OAAOA,EAAM1B,OAASR,GACpB,SAAC,EAAD,CAEEjB,GAAImD,EAAMnD,GACVC,QAASkD,EAAMlD,QACfC,aAAc+C,EACd9C,gBAAiBmD,GAJZH,EAAMnD,KAOb,kBAAUmD,EAAMnD,GAEnB,OAEH,SAAC,KAAD,CAAc+D,MAAM,SAASjE,QA5GD,4CA4G5B,uBAGL,C","sources":["components/Status/styles.ts","components/Status/index.tsx","hooks/useStatus/index.ts","pages/Dashboard/styles.ts","components/MenuBar/styles.ts","components/MenuBar/index.tsx","components/Card/styles.ts","components/Card/index.tsx","pages/Dashboard/index.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\n\ninterface StatusViewProps {\n  type: string;\n}\n\nexport const StatusView = styled.span<StatusViewProps>`\n  display: block;\n  margin-top: 8px;\n  color: #04d361;\n  ${props =>\n    props.type === 'error' &&\n    css`\n      color: #c53030;\n    `}\n`;\n","import React from 'react';\nimport { IStatus } from '../../hooks/useStatus';\nimport { StatusView } from './styles';\n\ninterface IStatusProps {\n  status: IStatus | null;\n}\n\nconst Status: React.FC<IStatusProps> = ({ status }: IStatusProps) => {\n  return status ? (\n    <StatusView type={status?.type}>\n      <strong>{status?.message}</strong>\n    </StatusView>\n  ) : (\n    <></>\n  );\n};\n\nexport default Status;\n","import React from 'react';\nexport interface IStatus {\n  type: string;\n  fields: string;\n  message: string;\n}\n\nexport const useStatus = (initial: IStatus | null) => {\n  return React.useState<IStatus | null>(initial);\n};\n","import styled from 'styled-components';\n\n\nexport const DateContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  svg {\n    cursor: pointer;\n  }\n`;\n\nexport const EntryList = styled.div`\n  max-width: 400px;\n  margin-top: 20px;\n`;\n","import styled from 'styled-components';\n\nexport const MenuBarContainer = styled.div`\n  width: 100%;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    height: 64px;\n    border-radius: 50%;\n    margin: 0px 80px 0px 80px;\n  }\n  svg {\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport { MenuBarContainer } from './styles';\nimport { FiLogOut } from 'react-icons/fi';\nimport userImg from '../../assets/user.png';\nimport { UserAuth } from '../../contexts/AuthContext';\n\nconst MenuBar: React.FC = () => {\n  const {user, logOut} = UserAuth();\n\n  const handleLogout = async () => {\n    try{\n      await logOut();\n    } catch (error)  {\n      console.log(error);\n      // setInputStatus({type: \"error\", fields: \"email\", message: (error instanceof Error)?error.message:\"Unknown error\"});\n    }\n  }\n  return (\n    <MenuBarContainer>\n      <img src={user.photoURL?user.photoURL:userImg} onError={({ currentTarget }) => {\n        currentTarget.onerror = null;\n        currentTarget.src=userImg;\n      }} alt=\"User photograph\"/>\n      <FiLogOut size={30} onClick={() => handleLogout()} />\n    </MenuBarContainer>\n  );\n};\n\nexport default MenuBar;\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  font-size: 36px;\n  color: #3a3a3a;\n`;\n\nexport const CardContainer = styled.div`\n  max-width: 400px;\n  width: 100%;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  padding: 0px;\n  margin: 10px 0px 0px 0px;\n\n  background-color: #eee;\n  border-radius: 5px;\n  border-left: 3px dashed lightgray;\n\n  div {\n    margin-left: 10px;\n    width: 100%;\n  }\n\n  .ContentContainer {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    width: 100%;\n    border-radius: 5px 5px 0px 0px;\n    margin: 0;\n    background: #fff;\n\n    header {\n      width: 100%;\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n\n      svg {\n        margin: 10px;\n        cursor: pointer;\n      }\n    }\n    strong {\n      color: darkgray;\n      width: 100%;\n      padding: 10px;\n    }\n\n    span {\n      border: 0px;\n      padding: 10px;\n      width: 100%;\n      text-align: justify;\n\n      max-height: 200px;\n      overflow: hidden;\n    }\n\n    span:empty::before {\n      content: attr(data-placeholder);\n      color: lightgray;\n    }\n\n    span:focus {\n      outline: none;\n    }\n\n    .ActionContainer {\n      width: 100%;\n      display: flex;\n      flex-direction: row;\n      justify-content: space-around;\n      margin: 4px;\n      p {\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        * {\n          margin-right: 5px;\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { CardContainer } from './styles';\nimport { FiTrash2 } from 'react-icons/fi';\n\ninterface ICardProps {\n  id: string;\n  content: string;\n  onDeleteCard: any;\n  onChangeContent: any;\n}\n\nconst Card: React.FC<ICardProps> = ({\n  id,\n  content,\n  onDeleteCard,\n  onChangeContent\n}: ICardProps) => {\n  const textRef = React.useRef<HTMLSpanElement>(null);\n  return (\n    <CardContainer key={id} >\n      <div className=\"ContentContainer\">\n        <header>\n          <strong>id: {id}</strong>\n          <FiTrash2 onClick={e => onDeleteCard(id)}></FiTrash2>\n        </header>\n        <span\n          ref={textRef}\n          role=\"textbox\"\n          contentEditable\n          data-placeholder='What are you grateful for this day?'\n          onBlur={e => onChangeContent(id, e.currentTarget.innerText)}\n          suppressContentEditableWarning={true}\n        >\n          {content}\n        </span>\n      </div>\n    </CardContainer>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport { BodyContainer, CustomButton } from \"../../styles/global\";\nimport { DateContainer, EntryList } from \"./styles\";\nimport Status from \"../../components/Status\";\nimport MenuBar from \"../../components/MenuBar\";\nimport Card from \"../../components/Card\";\nimport { useStatus } from \"../../hooks/useStatus\";\nimport uuid from \"react-uuid\";\nimport { FiArrowLeft, FiArrowRight } from 'react-icons/fi';\nimport { database} from \"../../services/firebase\";\nimport {collection, query, where, getDocs, doc, addDoc, setDoc, deleteDoc} from 'firebase/firestore';\nimport { UserAuth } from '../../contexts/AuthContext';\ninterface IEntry {\n  uid: string;\n  id: string;\n  content: string;\n  date: string;\n}\n\nconst Dashboard: React.FC = () => {\n  const startDate = new Date().toISOString().split(\"T\")[0];\n  const [selectedDate, setSelectedDate] = React.useState<string>(startDate);\n  const [entries, setEntries] = React.useState<IEntry[]>([]);\n  const [inputStatus, setInputStatus] = useStatus(null);\n  const dateRef = React.useRef<HTMLInputElement>(null);\n  const {user} = UserAuth();\n\n  const handleDateIncDec = (days: number) => {\n    const date = new Date(selectedDate);\n    date.setDate(date.getDate() + days);\n    const dateStr = date.toISOString().split(\"T\")[0];\n    setSelectedDate(dateStr);\n    if (dateRef !== null && dateRef.current !== null) {\n      dateRef.current.value = dateStr;\n    }\n  };\n\n  const handleDateChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedDate(event.target.value);\n  };\n\n  async function handleAddNewEntry(event: React.FormEvent<HTMLButtonElement>) {\n    const newEntry: IEntry = {\n      uid: user.uid,\n      id: uuid(),\n      content: \"\",\n      date: selectedDate,\n    };\n    const newEntries = [...entries, newEntry];\n    setEntries(newEntries);\n    await addDoc(collection(database, \"entries\"), newEntry);\n  }\n\n  async function fetchEntries() {\n    console.log(user.uid);\n    const userQuery = query(collection(database, \"entries\"), where(\"uid\", \"==\", user.uid));\n    const querySnapshot = await getDocs(userQuery);\n    const entries: IEntry[] = [];\n    querySnapshot.forEach((doc) => {\n      entries.push(doc.data() as IEntry);\n    });\n    setEntries(entries);\n  }\n\n  React.useEffect(() => {\n    fetchEntries();\n  }, []);\n\n  const handleDeleteEntry = async (id: string) => {\n    const newEntries = entries.filter(entry => entry.id !== id);\n    setEntries(newEntries);\n    const userQuery = query(collection(database, \"entries\"), where(\"id\", \"==\", id));\n    const querySnapshot = await getDocs(userQuery);\n    querySnapshot.forEach((document) => {\n      deleteDoc(doc(database, \"entries\", document.id));\n    });\n  }\n\n  const handleChangeEntry = async (id: string, content: string) => {\n    const newEntries = entries.map((entry) => {\n      if (entry.id === id) {\n        entry.content = content;\n      }\n      return entry;\n    });\n    setEntries(newEntries);\n\n    const changedEntry = entries.find(entry => entry.id === id);\n    if (changedEntry) {\n      changedEntry.content = content;\n      const userQuery = query(collection(database, \"entries\"), where(\"id\", \"==\", id));\n      const querySnapshot = await getDocs(userQuery);\n      querySnapshot.forEach((document) => {\n        setDoc(doc(database, \"entries\", document.id), changedEntry);\n      });\n    }\n  }\n\n  return (\n      <BodyContainer>\n      <MenuBar/>\n      <Status status={inputStatus} />\n      <DateContainer>\n      <FiArrowLeft size={30} onClick={() => handleDateIncDec(-1)}/>\n        <input\n          ref={dateRef}\n          type=\"date\"\n          defaultValue={startDate}\n          onChange={handleDateChanged}\n        ></input>\n      <FiArrowRight size={30} onClick={() => handleDateIncDec(1)}/>\n      </DateContainer>\n      <EntryList>\n        {entries.map((entry) => {\n          return entry.date === selectedDate ? (\n            <Card\n              key={entry.id}\n              id={entry.id}\n              content={entry.content}\n              onDeleteCard={handleDeleteEntry}\n              onChangeContent={handleChangeEntry}\n            />\n          ) : (\n            <div key={entry.id} ></div>\n          );\n        })}\n      </EntryList>\n      <CustomButton color=\"orange\" onClick={handleAddNewEntry}>Add New</CustomButton>\n      </BodyContainer>\n  );\n};\n\nexport default Dashboard;\n"],"names":["StatusView","styled","props","type","css","status","message","useStatus","initial","React","DateContainer","EntryList","MenuBarContainer","UserAuth","user","logOut","handleLogout","console","log","src","photoURL","userImg","onError","currentTarget","onerror","alt","size","onClick","CardContainer","id","content","onDeleteCard","onChangeContent","textRef","className","e","ref","role","contentEditable","onBlur","innerText","suppressContentEditableWarning","startDate","Date","toISOString","split","selectedDate","setSelectedDate","entries","setEntries","inputStatus","dateRef","handleDateIncDec","days","date","setDate","getDate","dateStr","current","value","event","newEntry","uid","uuid","newEntries","addDoc","collection","database","userQuery","query","where","getDocs","querySnapshot","forEach","doc","push","data","fetchEntries","handleDeleteEntry","filter","entry","document","deleteDoc","handleChangeEntry","map","changedEntry","find","setDoc","Status","defaultValue","onChange","target","color"],"sourceRoot":""}